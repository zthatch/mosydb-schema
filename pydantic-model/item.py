# generated by datamodel-codegen:
#   filename:  item.json
#   timestamp: 2021-09-10T06:28:00+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field

from .helper import value


class Label(Enum):
    input = 'input'
    output = 'output'


class Link(BaseModel):
    item: Optional[str] = Field(
        None, description='internally-related unique ID', title='link experiment@id'
    )
    url: Optional[str] = Field(
        None, description='url to the item', title='link external url'
    )


class Link1(BaseModel):
    item: Optional[str] = Field(
        None, description='internally-related unique ID', title='link experiment@id'
    )


class Successful(Enum):
    unknown = 'unknown'
    yes = 'yes'
    no = 'no'


class Input(BaseModel):
    name: Optional[str] = Field(
        None, description='the name an object', title='object name'
    )
    description: Optional[str] = Field(
        None, description='a verbal description of an object', title='description'
    )
    link: Optional[Link] = Field(None, description='linked object', title='_key')
    value: Optional[value.Value] = Field(
        None, description='the quantitative and/or qualitative description of the input'
    )


class Result(BaseModel):
    user_label: Optional[str] = Field(
        None, description='the label a user used, eg. in notebook', title='sample label'
    )
    successful: Optional[Successful] = Field(
        None, description='whether the result is as expected', title='successful'
    )
    value: Optional[value.Value] = Field(
        None,
        description='the quantitative and/or qualitative description of the result',
    )
    attachment: Optional[str] = Field(
        None,
        description='a path to an attachment. Allows a single attachment',
        title='attachment',
    )


class _Output(BaseModel):
    name: Optional[str] = Field(
        None, description='the name an object', title='object name'
    )
    description: Optional[str] = Field(
        None, description='a verbal description of an object', title='description'
    )
    link: Optional[Link1] = Field(None, description='lined object', title='link')
    result: Optional[Result] = Field(
        None, description='the output results', title='results'
    )


class Item(BaseModel):
    _id: Optional[str] = Field(
        None, alias='@id', description='unique ID for an item', title='item@id'
    )
    label: Optional[Label] = Field(None, description='type of item', title='_key')
    input: Optional[Input] = Field(None, description='an input item', title='_key')
    _output: Optional[_Output] = Field(None, description='an output type', title='_key')
