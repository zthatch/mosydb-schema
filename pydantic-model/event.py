# generated by datamodel-codegen:
#   filename:  event.json
#   timestamp: 2021-09-10T06:28:00+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field

from . import item
from .helper import time, value


class Class(Enum):
    act = 'act'
    obs = 'obs'


class State(BaseModel):
    atmosphere: Optional[str] = Field(
        None,
        description='the type of the atmosphere: glove-box, N2, Ar, ambient',
        title='atmosphere',
    )
    values: Optional[value.Value] = Field(
        None,
        description='the quantitative and/or qualitative description of a system state',
    )


class _Environment(BaseModel):
    container: Optional[str] = Field(
        None,
        description='name of the container in which the materials are processed',
        title='_key',
    )
    value: Optional[value.Value] = Field(
        None,
        description='the quantitative and/or qualitative description for the container',
    )
    state: Optional[State] = Field(None, title='state')


class Sequence(BaseModel):
    index: Optional[int] = Field(
        None, description='the index-step at which this event happened', title='order'
    )
    _timed: Optional[time.Time] = Field(
        None, description='The time this event happened'
    )


class Event(BaseModel):
    _id: Optional[str] = Field(
        None, alias='@id', description='unique ID for an event', title='event@id'
    )
    executed: Optional[bool] = Field(
        None,
        description='distinction on whether the protocol have been executed',
        title='executed',
    )
    experiment: Optional[str] = Field(
        None, description='related experiment ID', title='experiment@id'
    )
    _environment: Optional[_Environment] = Field(
        None, description='state that the system is at', title='environment'
    )
    sequence: Optional[Sequence] = Field(
        None,
        description='to order the sequence of events in an experiment',
        title='sequence',
    )
    class_: Optional[Class] = Field(
        None,
        alias='class',
        description='The class of the event: action or observation',
        title='class',
    )
    action: Optional[str] = Field(
        None,
        description='the action name - a group of allowed names, based on the field (from experiment/user) and class (above)',
        title='action',
    )
    item: Optional[item.Item] = None
